-- Transputer/occam flag simulation -- colour maps etc. for various flags
--
-- Forfeited into the public domain with NO WARRANTY. Read LICENSE for details.


-- {{{***** Includes *****
#INCLUDE "hostio.inc"

#INCLUDE "flagflag.inc"
-- }}}


-- {{{***** Constants *****
VAL [][]BYTE kUkFlagData IS ["3331111133222223311111322",
                             "2333111133222223311113223",
                             "2333111133222223311113223",
                             "2233311133222223311132233",
                             "2233311133222223311132233",
                             "3223331133222223311322333",
                             "3223331133222223311322333",
                             "1322333133222223313223331",
                             "1322333133222223313223331",
                             "1132233333222223332233311",
                             "1132233333222223332233311",
                             "1113223333222223322333111",
                             "1113223333222223322333111",
                             "1111322333222223323331111",
                             "1111322333222223323331111",
                             "1111132233222223333311111",
                             "1111132233222223333311111",
                             "1111113233222223333111111",
                             "1111113233222223333111111",
                             "1111111333222223331111111",
                             "1111111333222223331111111",
                             "3333333333222223333333333",
                             "2222222222222222222222222",
                             "2222222222222222222222222",
                             "2222222222222222222222222",
                             "2222222222222222222222222",
                             "2222222222222222222222222",
                             "2222222222222222222222222",
                             "3333333333222223333333333",
                             "1111111333222223331111111",
                             "1111111333222223331111111",
                             "1111113333222223323111111",
                             "1111113333222223323111111",
                             "1111133333222223322311111",
                             "1111133333222223322311111",
                             "1111333233222223332231111",
                             "1111333233222223332231111",
                             "1113332233222223333223111",
                             "1113332233222223333223111",
                             "1133322333222223333322311",
                             "1133322333222223333322311",
                             "1333223133222223313332231",
                             "1333223133222223313332231",
                             "3332231133222223311333223",
                             "3332231133222223311333223",
                             "3322311133222223311133322",
                             "3322311133222223311133322",
                             "3223111133222223311113332",
                             "3223111133222223311113332",
                             "2231111133222223311111333"] :

VAL [][]BYTE kChequeredFlagData IS ["03030",
                                    "30303",
                                    "03030",
                                    "30303",
                                    "03030",
                                    "30303",
                                    "03030",
                                    "30303"]  :
-- }}}


-- {{{FlagFillColourMap -- Paint a flag pattern into a colour map
--
-- The colour map is a byte array that assigns a colour (a value in 0..3,
-- because CGA) to each element in the flag. See usage in flagdraw.occ.
--
-- Args:
--   flag.type: Numerical value indicating which flag to paint into the colour
--       map; see constants in flagflag.inc
--   rows, columns: Flag dimensions
--   colour.map: A rows*columns byte array receiving the colour map.
PROC FlagFillColourMap (VAL INT flag.type, rows, columns, []BYTE colour.map)

  -- {{{FillFlagFromPicture -- Scale a 2D ASCII-digit array into the colour map
  --
  -- Args:
  --   picture: An array of strings whose characters should all be '0', '1',
  --       '2', or '3'. Conceptually, this array is stretched to a rows*columns
  --       rectangle using (something close to) nearest-neighbour interpolation
  --       and then values from this stretched array are transferred into the
  --       colour map with ASCII digits turned into their numerical values
  --       (i.e. '0' to 0, '1' to 1, and so on).
  PROC FillFlagFromPicture (VAL [][]BYTE picture)  -- Scale data from an array
    SEQ r = 0 FOR rows
      VAL []BYTE stripe IS picture[(r * (SIZE picture)) / rows] :
      []BYTE colour.row IS [colour.map FROM (r * columns) FOR columns] :
      SEQ c = 0 FOR columns
        VAL stripe.ind IS (c * (SIZE stripe)) / columns :
        colour.row[c] := BYTE ((INT stripe[stripe.ind]) - '0'(INT))
  :
  -- }}}

  IF
    -- White banded black stripe on cyan field of Botswana
    flag.type = kFlagBotswana
      FillFlagFromPicture (["111103301111"])

    -- Estonian horizontal tricolour
    flag.type = kFlagEstonia
      FillFlagFromPicture (["103"])

    -- Luxembourgian horizontal tricolour
    flag.type = kFlagLuxembourg
      FillFlagFromPicture (["231"])

    -- Benin's, uh, letter E maybe? Not sure what to call it
    flag.type = kFlagBenin
      FillFlagFromPicture (["11",
                            "11",
                            "23",
                            "23",
                            "23"])

    -- Mali's vertical tricolour
    flag.type = kFlagMali
      FillFlagFromPicture (["1",
                            "3",
                            "2"]);

    -- A lousy rendition of the French tricolour
    flag.type = kFlagFrance
      FillFlagFromPicture (["1",
                            "3",
                            "2"]);

    -- Peruvian vertical tricolour
    flag.type = kFlagPeru
      FillFlagFromPicture (["2",
                            "3",
                            "2"]);

    -- The UK's Union flag
    flag.type = kFlagUk
      FillFlagFromPicture (kUkFlagData)

    -- A chequered flag
    flag.type = kFlagChequered
      FillFlagFromPicture (kChequeredFlagData)

    -- Trans flag: the default.
    TRUE
      FillFlagFromPicture (["12321"])
:
-- }}}


-- {{{FlagCgaVideoModeOptions -- Look up CGA parameters by flag type
--
-- Args:
--   flag.type: Numerical value indicating which flag to retrieve parameters
--       for; see constants in flagflag.inc
--
-- Returns: three booleans ---
--   First: True if we should use CGA mode 5; false for mode 4
--   Second: True if we should use intense colours; false for dim ones
--   Third: True for cyan/magenta/white colours; false for red/yellow/green
BOOL, BOOL, BOOL FUNCTION FlagCgaVideoModeOptions (VAL INT flag.type)
  VAL kModeFiveMask IS #4 :
  VAL kIntenseMask IS #2 :
  VAL kCmwMask IS #1 :
  VAL []BYTE kOptionTable IS
      [BYTE (kIntenseMask \/ kCmwMask),       -- kFlagTrans
       BYTE (kIntenseMask \/ kCmwMask),       -- kFlagBotswana
       BYTE (kIntenseMask \/ kCmwMask),       -- kFlagEstonia
       BYTE (kModeFiveMask \/ kIntenseMask),  -- kFlagLuxembourg
       BYTE kIntenseMask,                     -- kFlagBenin
       BYTE kIntenseMask,                     -- kFlagMali
       BYTE (kModeFiveMask \/ kIntenseMask),  -- kFlagFrance
       BYTE (kModeFiveMask \/ kIntenseMask),  -- kFlagPeru
       BYTE (kModeFiveMask \/ kIntenseMask),  -- kFlagUk
       BYTE (kIntenseMask \/ kCmwMask)] :     -- kFlagChequered
  VAL options IS INT kOptionTable[flag.type] :
  BOOL five.not.four, intense.not.dim, cmw.not.ryg :
  VALOF
    PAR
      five.not.four := (options /\ kModeFiveMask) > 0
      intense.not.dim := (options /\ kIntenseMask) > 0
      cmw.not.ryg := (options /\ kCmwMask) > 0
    RESULT five.not.four, intense.not.dim, cmw.not.ryg
:
-- }}}


-- {{{FlagCgaVideoMode -- Set up the CGA display system for a particular flag
--
-- Args:
--   fs, ts: hostio channels
--   flag.type: Numerical value indicating which flag to configure the CGA
--       display system for; see constants in flagflag.inc
--   result: The msdos.lib result byte set by cga.occ:CgaVideoMode
PROC FlagCgaVideoMode (CHAN OF SP fs, ts, VAL INT flag.type, BYTE result)

  #USE "cga"

  BOOL five.etc, intense.etc, cmw.etc :
  SEQ
    five.etc, intense.etc, cmw.etc := FlagCgaVideoModeOptions (flag.type)
    CgaVideoMode (fs, ts, TRUE, five.etc, intense.etc, cmw.etc, result)
:
-- }}}
